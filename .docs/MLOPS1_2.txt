nstructions
Assignment Title: Formative Lesson 01+02: From Data Science Project to basic MLOps 

Assignment Overview 

In this assignment, you will replicate the tasks from Lesson 02 in your own GitHub repositories. This will help you understand the practical applications of data science and the basics of MLOps. 

Steps to Complete the Assignment 

1.      Review Lesson 02: 

Go through the materials and tasks covered in Lesson 02 to ensure you understand the concepts and processes. 
Remember the last slide of the intro presentation! 
2.      Fork repository: 

Fork https://github.com/clausagerskov/ARISA-MLOps to your personal github account 
3.      Get notebooks up and running: 

Follow the readme.md to get the existing notebooks up and running. 
4.      Copy python project config files and Makefile to repo root: 

Attached to the assignment are three files, setup.cfg, pyproject.toml and Makefile. Copy these to your repository root folder. 
If you do not have a .github folder in your repository create it, then create a workflows folder within the .github folder and copy paste the attached lint-code.yml file to the worksflows folder. 
Commit this to the main branch (no need for a pull request yet). 
On the github webpage, go to your repo settings, go to branches, add a classic branch protection rule, enter main in Branch name pattern, click Require pull request before merging, click Require status checks to pass before merging. 
5.      Create a new branch off main: 

Create a new branch off your main branch, named appropriately as discusses in class. 

6.      Checkout branch:
In VS Code, fetch from origin, then switch to your branch. 

7.      Prepare to refactor: 

In your venv pip install catboost matplotlib pandas scikit-learn kaggle optuna ipywidgets kaleido shap nbformat loguru dotenv ruff flake8 cookiecutter-data-science 
     Run ccds in your repository folder:

     project_name: titanic_survival_classification
     repo_name: ARISA-MLOps
     module_name: ARISA_DSML
     author_name: your name
     description:
     python_version_number: number of python you used to create the venv, recommended 3.11
     Select dataset_storage: 1
     Select environment_manager: 4
     Select dependency_file: 1
     Select pydata_packages: 1
     Select open_source_license: 1
     Select docs: 1
     Select include_code_scaffold:
     If the template is created in a subfolder, then move to the repo root. 

8.      Clean up code: 

Move notebooks to the notebooks folder 
Create an appropriately named notebook version 03 
Move all code into appropriate py scripts in the ARISA_DSML folder (a recommended config.py is also attached).
Limit the amount of code in your notebook to calling the python functions that you need to process data, train models and plot figures. 
In your venv pip install catboost matplotlib pandas scikit-learn kaggle optuna ipywidgets kaleido shap nbformat loguru dotenv ruff flake8 cookiecutter-data-science 
Run ccds in your repository folder:
project_name: titanic_survival_classification
repo_name: ARISA-MLOps
module_name: ARISA_DSML
author_name: your name
description:
python_version_number: number of python you used to create the venv, recommended 3.11
Select dataset_storage: 1
Select environment_manager: 4
Select dependency_file: 1
Select pydata_packages: 1
Select open_source_license: 1
Select docs: 1
Select include_code_scaffold:
if the template is created in a subfolder, then move to the repo root. 
9.      Freeze requirements: 

With your venv activated run pip freeze –local > requirements.txt 
If you are on windows, add ; platform_system==”Windows” to the line with pywin 
10. Commit your work to your branch: 

Commit and push your work your branch. 
If you copied the lint-code.yml correctly, a github action workflow should now be running, and eventually fail, listing the places where your code is not clean. 
11. Clean up code: 

Back in VS Code, in your venv enabled terminal, in your repo root, run flake8 ARISA_DSML to see where your code is not clean. 
Fix the problems with the code until flake8 ARISA_DSML does not show any problems. 
Recommit to branch. 
12. Check code lint workflow runs successfully: 

Once you have cleaned up your code, the github action workflow should finish successfully and show a green checkmark. That means that you have successfully completed the assignment. 
7.      Submit Your Repository Link: 

After pushing your code, submit the link to your GitHub repository as your assignment submission. 
8.      Reflect on Your Learning: 

Write a brief reflection (1-2 paragraphs) on what you learned from replicating the tasks and how it relates to data science and MLOps, focusing on what the purpose of this whole code cleaning business is. Why can we not just use notebooks in production? 
Submission Guidelines 

Ensure your repository is public or shared with the instructor. 
Submit the link to your repository and your reflection by the due date. 
 

While this formative assignment is optional and ungraded, completing the assignment is crucial to make sure you will be able to carry out tasks that might be in the final, graded assignment. 

Make sure to ask in the general chat if you get stuck, or work with the other students.


Optional "extra credits":
It is actually already possible, using the tools we have been presented in lecture 02, 
to create an automated model training pipeline.
You simply need to add a main function to preproc.py and train.py, which preprocesses data and trains the model.
Then you can create another github action workflow yml file, e.g. preproc-train.yml and instead of on pull request,

will train when the pull request is accepted and pushed to main. 

An example preproc-train.yml is also attached.